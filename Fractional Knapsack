class Solution
{
    public:
    static bool cmp(pair<double,Item>a,pair<double,Item>b){
        return a.first >b.first ;
    }
    //Function to get the maximum total value in the knapsack.
    double fractionalKnapsack(int W, Item a[], int n)
    {
        // Your code here
        vector<pair<double,Item>>v;
        for(int i=0;i<n;i++){
            double perUnitValue = (1.0*a[i].value)/a[i].weight;
            pair<double,Item>p = make_pair(perUnitValue,a[i]);
            v.push_back(p);
        }
        sort(v.begin(),v.end(),cmp);
        double totalVal =0;
        for(int i=0;i<n;i++){
            if(v[i].second.weight>W){
                totalVal += W*v[i].first;
                W = 0;
            }
            else{
                totalVal += v[i].second.value;
                W -= v[i].second.weight ;
            }
        }
        return totalVal ;
    }
        
};
